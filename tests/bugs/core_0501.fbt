{
'id': 'bugs.core_501',
'qmid': None,
'tracker_id': 'CORE-501',
'title': 'Problem with COALESCE',
'description': 'It tests many problems Adriano found when fixing CORE-501, CORE-1343 and CORE-2041.',
'min_versions': '',
'versions': [
{
 'firebird_version': '2.5',
 'platform': 'All',
 'page_size': '4096',
 'init_script': """create sequence s1;
""",
 'test_type': 'ISQL',
 'test_script': """-- test computed expressions
create table t1 (
  n integer primary key,
  x integer,
  cn computed by (coalesce(n + 0, null)),
  cx computed by (coalesce(x + 0, null))
);

-- test update or insert
update or insert into t1 values (next value for s1, 10);
update or insert into t1 values (next value for s1, 20);
update or insert into t1 values (next value for s1, 30);

select * from t1;

-- test sequence value after update or insert
select gen_id(s1, 0) from rdb$database;

-- test update or insert using coalesce
update or insert into t1
  values (coalesce((select first 1 n from t1 order by n), null), coalesce(40 + 60, 0));

-- test update or insert in PSQL
set term ^ ;
execute block returns (n integer, x integer, cn integer, cx integer)
as
  declare z integer = 200;
begin
  update or insert into t1
    values (coalesce((select first 1 skip 1 n from t1 order by n), null), :z);

  for select n, x, cn, cx from t1 into n, x, cn, cx do
      suspend;
end^

set term ; ^

select gen_id(s1, 0) from rdb$database;

-- test view
create view v1 as
  select t1.*, coalesce(n + 0, null) vcn from t1;

select * from v1;

-- test update or insert into a view
update or insert into v1 values (next value for s1, 40);

-- test update or insert into a view in PSQL
set term ^ ;

execute block returns (n integer, x integer, cn integer, cx integer)
as
  declare z integer = 300;
begin
  update or insert into v1 values ((select first 1 skip 2 n from t1 order by n), :z);

  for select n, x, cn, cx from v1 into n, x, cn, cx do
      suspend;
end^


-- test view trigger
create trigger v1_bi before insert on v1
as
  declare z integer = 1000;
begin
  insert into t1 values (coalesce(new.n + :z, null), new.x);
end^

set term ; ^

insert into v1 values (8, 88);

select * from v1;

-- test coalesce
select coalesce(n * 1, null) from v1;
select coalesce(n * 1, null) from t1 group by coalesce(n * 1, null);
select coalesce(n * 1, null) from v1 group by coalesce(n * 1, null);
select coalesce(n * 1, null) from v1 group by 1;
select coalesce(n * 1, null) from v1 group by 1 having coalesce(n * 1, null) < 100;
select coalesce(n * 10, null) from v1 order by 1;
select coalesce(n * 10, null), coalesce(x * 10, null) from v1 order by 2 desc, 1 desc;
select coalesce(n * 10, null), coalesce(x * 10, null) from v1 order by 1 desc, 2 desc;

-- test case
select case n * 1 when 1 then n * 1 else n + 0 end
  from v1 group by case n * 1 when 1 then n * 1 else n + 0 end;
select case n * 1 when 1 then n * 1 else n + 0 end from v1 group by 1;
select case n * 1 when 1 then n * 1 else n + 0 end
  from v1 group by 1 having case n * 1 when 1 then n * 1 else n + 0 end < 100;
select case n * 1 when 1 then n * 1 else n + 0 end from v1 order by 1 desc;

-- test non-valid statements
select coalesce(n * 1, null) from v1 group by 1 having coalesce(n * 0, null) < 100;
select case n * 1 when 1 then n * 1 else n + 0 end
  from v1 group by case n * 1 when 1 then n * 1 else n + 1 end;
select case n * 1 when 1 then n * 1 else n + 0 end
  from v1 group by 1 having case n * 1 when 1 then n * 1 else n + 1 end < 100;

set term ^ ;

create procedure p1 returns (n integer)
as
begin
  select coalesce(n * 1, null) from t1 group by coalesce(n * 1, null) into n;
  suspend;
end^

set term ; ^

commit;
-- set blob all;
-- select rdb$procedure_blr from rdb$procedures where rdb$procedure_name = 'P1';

-- test coalesce in view condition
create view v2 as
  select t1.n n, coalesce(n + 1, null) x1, coalesce(n + 2, null) x2 from t1
    where coalesce(0 + 0, null) = coalesce(0 + 0, null);

select * from v2;

-- test coalesce in view using distinct
create view v3 as
  select distinct
      t1.n n,
      coalesce(n + 1, null) + coalesce(n + 11, null) x1,
      coalesce(n + 2, null) + coalesce(n + 22, null) x2
    from t1;

select * from v3;

-- test coalesce with subselect with coalesce in view
create view v4 as
  select
      t1.n n,
      coalesce((select coalesce(0 + 1, null) from rdb$database), null) x1,
      coalesce((select coalesce(2 + 1, null) from rdb$database), null) x2
    from t1;

select * from v4;

-- test coalesce in view using union
create view v5 (n, x1, x2) as
  select
      t1.n n,
      coalesce(n + 1, null) + coalesce(n + 11, null) x1,
      coalesce(n + 2, null) + coalesce(n + 22, null) x2
    from t1
  union all
  select
      t1.n n,
      coalesce(n + 1, null) + coalesce(n + 11, null) x1,
      coalesce(n + 2, null) + coalesce(n + 22, null) x2
    from t1;

select * from v5;

-- test constraint
alter table t1
  add constraint t1_n check (coalesce(n + 0, null) < 10),
  add constraint t1_cx check (coalesce(cx + 0, null) < 10);

insert into t1 values (5, 5);
insert into t1 values (50, 5);
insert into t1 values (5, 50);

-- test domain constraint
create domain dc1 as integer check (coalesce(value + 0, null) < 10);
create domain dc2 as integer check (coalesce(value + 0, null) < 10);

alter table t1
  add dc1 dc1,
  add dc2 dc2;

insert into t1 (n, dc1) values (6, 6);
insert into t1 (n, dc2) values (7, 7);
insert into t1 (n, dc1) values (8, 10);
insert into t1 (n, dc2) values (8, 10);

-- add bad computed expression with coalesce
alter table t1
  add bc computed by (coalesce(n / (n - 2), null));

select bc from t1 order by n;

-- test parameters
set sqlda_display on;

select coalesce(1 + cast(? as integer), 2 + cast(? as integer))
  from rdb$database
  where coalesce(3 + cast(? as bigint), null) = 0;
""",
 'expected_stdout': """
           N            X                    CN                    CX
============ ============ ===================== =====================
           1           10                     1                    10
           2           20                     2                    20
           3           30                     3                    30


               GEN_ID
=====================
                    3


           N            X           CN           CX
============ ============ ============ ============
           1          100            1          100
           2          200            2          200
           3           30            3           30


               GEN_ID
=====================
                    3


           N            X                    CN                    CX                   VCN
============ ============ ===================== ===================== =====================
           1          100                     1                   100                     1
           2          200                     2                   200                     2
           3           30                     3                    30                     3


           N            X           CN           CX
============ ============ ============ ============
           1          100            1          100
           2          200            2          200
           3          300            3          300
           4           40            4           40


           N            X                    CN                    CX                   VCN
============ ============ ===================== ===================== =====================
           1          100                     1                   100                     1
           2          200                     2                   200                     2
           3          300                     3                   300                     3
           4           40                     4                    40                     4
        1008           88                  1008                    88                  1008


             COALESCE
=====================
                    1
                    2
                    3
                    4
                 1008


             COALESCE
=====================
                    1
                    2
                    3
                    4
                 1008


             COALESCE
=====================
                    1
                    2
                    3
                    4
                 1008


             COALESCE
=====================
                    1
                    2
                    3
                    4
                 1008


             COALESCE
=====================
                    1
                    2
                    3
                    4


             COALESCE
=====================
                   10
                   20
                   30
                   40
                10080


             COALESCE              COALESCE
===================== =====================
                   30                  3000
                   20                  2000
                   10                  1000
                10080                   880
                   40                   400


             COALESCE              COALESCE
===================== =====================
                10080                   880
                   40                   400
                   30                  3000
                   20                  2000
                   10                  1000


                 CASE
=====================
                    1
                    2
                    3
                    4
                 1008


                 CASE
=====================
                    1
                    2
                    3
                    4
                 1008


                 CASE
=====================
                    1
                    2
                    3
                    4


                 CASE
=====================
                 1008
                    4
                    3
                    2
                    1


           N                    X1                    X2
============ ===================== =====================
           1                     2                     3
           2                     3                     4
           3                     4                     5
           4                     5                     6
        1008                  1009                  1010


           N                    X1                    X2
============ ===================== =====================
           1                    14                    26
           2                    16                    28
           3                    18                    30
           4                    20                    32
        1008                  2028                  2040


           N                    X1                    X2
============ ===================== =====================
           1                     1                     3
           2                     1                     3
           3                     1                     3
           4                     1                     3
        1008                     1                     3


           N                    X1                    X2
============ ===================== =====================
           1                    14                    26
           2                    16                    28
           3                    18                    30
           4                    20                    32
        1008                  2028                  2040
           1                    14                    26
           2                    16                    28
           3                    18                    30
           4                    20                    32
        1008                  2028                  2040


                   BC
=====================
                   -1

INPUT  SQLDA version: 1 sqln: 10 sqld: 3
01: sqltype: 496 LONG	  		 sqlscale: 0 sqlsubtype: 0 sqllen: 4
  :  name: (0)  alias: (0)
  : table: (0)  owner: (0)
02: sqltype: 496 LONG	  		 sqlscale: 0 sqlsubtype: 0 sqllen: 4
  :  name: (0)  alias: (0)
  : table: (0)  owner: (0)
03: sqltype: 580 INT64	 		 sqlscale: 0 sqlsubtype: 0 sqllen: 8
  :  name: (0)  alias: (0)
  : table: (0)  owner: (0)

OUTPUT SQLDA version: 1 sqln: 20 sqld: 1
01: sqltype: 580 INT64	 		 sqlscale: 0 sqlsubtype: 0 sqllen: 8
  :  name: (8)COALESCE  alias: (8)COALESCE
  : table: (0)  owner: (0)

             COALESCE
=====================
""",
 'expected_stderr': """Statement failed, SQLSTATE = 42000

Dynamic SQL Error

-SQL error code = -104

-Invalid expression in the HAVING clause (neither an aggregate function nor a part of the GROUP BY clause)

Statement failed, SQLSTATE = 42000

Dynamic SQL Error

-SQL error code = -104

-Invalid expression in the select list (not contained in either an aggregate function or the GROUP BY clause)

Statement failed, SQLSTATE = 42000

Dynamic SQL Error

-SQL error code = -104

-Invalid expression in the HAVING clause (neither an aggregate function nor a part of the GROUP BY clause)

Statement failed, SQLSTATE = 23000

Operation violates CHECK constraint T1_N on view or table T1

-At trigger 'CHECK_1'

Statement failed, SQLSTATE = 23000

Operation violates CHECK constraint T1_CX on view or table T1

-At trigger 'CHECK_3'

Statement failed, SQLSTATE = 23000

validation error for column DC1, value "10"

Statement failed, SQLSTATE = 23000

validation error for column DC2, value "10"

Statement failed, SQLSTATE = 22012

arithmetic exception, numeric overflow, or string truncation

-Integer divide by zero.  The code attempted to divide an integer value by an integer divisor of zero.

Statement failed, SQLSTATE = 07002

Dynamic SQL Error

-SQL error code = -804

-SQLDA missing or incorrect version, or incorrect number/type of variables

"""
}
]
}
