{
'id': 'bugs.core_899',
'qmid': 'bugs.core_899-250',
'tracker_id': 'CORE-899',
'title': 'Problems with explicit cursors in unwanted states',
'description': '',
'versions': [
{
 'firebird_version': '2.5.0',
 'platform': 'All',
 'init_script': """create table T (ID integer, TXT varchar(30));
commit;

insert into T values (1,'Text description');
commit;

set term ^;

create procedure SP_OK returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    update T set TXT = 'OK' where current of C;
    suspend;
  end
  close C;
end ^

create procedure SP_CLOSED returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  close C;
  update T set TXT = 'SP_CLOSED' where current of C;
end ^

create procedure SP_NOTOPEN returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  update T set TXT = 'SP_NOTOPEN' where current of C;
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  close C;
end ^

create procedure SP_FETCHED returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  update T set TXT = 'SP_FETCHED' where current of C;
  close C;
end ^

set term ; ^

commit;
""",
 'test_type': 'ISQL',
 'test_script': """select * from SP_OK;
select * from SP_CLOSED;
select * from SP_NOTOPEN;
select * from SP_FETCHED;

""",
 'expected_stdout': """
          ID TXT
============ ==============================
           1 Text description


          ID TXT
============ ==============================
           1 OK

          ID TXT
============ ==============================

          ID TXT
============ ==============================
           1 OK
""",
 'expected_stderr': """Statement failed, SQLSTATE = 42000
no current record for fetch operation
-At procedure 'SP_CLOSED' line: 14, col: 3
Statement failed, SQLSTATE = 42000
no current record for fetch operation
-At procedure 'SP_NOTOPEN' line: 5, col: 3
Statement failed, SQLSTATE = 42000
no current record for fetch operation
-At procedure 'SP_FETCHED' line: 13, col: 3
"""
},
{
 'firebird_version': '2.1',
 'platform': 'All',
 'init_script': """create table T (ID integer, TXT varchar(30));
commit;

insert into T values (1,'Text description');
commit;

set term ^;

create procedure SP_OK returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    update T set TXT = 'OK' where current of C;
    suspend;
  end
  close C;
end ^

create procedure SP_CLOSED returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  close C;
  update T set TXT = 'SP_CLOSED' where current of C;
end ^

create procedure SP_NOTOPEN returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  update T set TXT = 'SP_NOTOPEN' where current of C;
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  close C;
end ^

create procedure SP_FETCHED returns (ID integer, TXT varchar(30))
as
  declare C cursor for ( select ID, TXT from T );
begin
  open C;
  while (1 = 1) do
  begin
    fetch C into :ID, :TXT;
    if (ROW_COUNT = 0) then
      leave;
    suspend;
  end
  update T set TXT = 'SP_FETCHED' where current of C;
  close C;
end ^

set term ; ^

commit;
""",
 'test_type': 'ISQL',
 'test_script': """select * from SP_OK;
select * from SP_CLOSED;
select * from SP_NOTOPEN;
select * from SP_FETCHED;

""",
 'expected_stdout': """
          ID TXT
============ ==============================
           1 Text description


          ID TXT
============ ==============================
           1 OK

          ID TXT
============ ==============================

          ID TXT
============ ==============================
           1 OK
""",
 'expected_stderr': """Statement failed, SQLCODE = -508
no current record for fetch operation
-At procedure 'SP_CLOSED' line: 14, col: 3
Statement failed, SQLCODE = -508
no current record for fetch operation
-At procedure 'SP_NOTOPEN' line: 5, col: 3
Statement failed, SQLCODE = -508
no current record for fetch operation
-At procedure 'SP_FETCHED' line: 13, col: 3
"""
}
]
}
