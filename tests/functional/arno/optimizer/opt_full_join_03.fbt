{
'id': 'functional.arno.optimizer.opt_full_join_03',
'qmid': 'functional.arno.optimizer.opt_full_join_03',
'tracker_id': '',
'title': 'FULL OUTER JOIN,  list all values, but filtered in WHERE clause',
'description': """TableX FULL OUTER JOIN TableY with relation in the ON clause.
Three tables are used, where 1 table (RC) holds references to the two other tables (R and C). The two tables R and C contain both 1 value that isn't inside RC.""",
'versions': [
{
 'firebird_version': '2.0',
 'platform': 'All',
 'init_script': """CREATE TABLE Relations (
  RelationID INTEGER,
  RelationName VARCHAR(35)
);

CREATE TABLE Categories (
  CategoryID INTEGER,
  Description VARCHAR(20)
);

CREATE TABLE RelationCategories (
  RelationID INTEGER,
  CategoryID INTEGER
);

COMMIT;

INSERT INTO Relations (RelationID, RelationName) VALUES (1, 'Diving Snorkel Shop');
INSERT INTO Relations (RelationID, RelationName) VALUES (2, 'Bakery garbage');
INSERT INTO Relations (RelationID, RelationName) VALUES (3, 'Racing turtle');
INSERT INTO Relations (RelationID, RelationName) VALUES (4, 'Folding air-hook shop');

INSERT INTO Categories (CategoryID, Description) VALUES (1, 'Relation');
INSERT INTO Categories (CategoryID, Description) VALUES (2, 'Debtor');
INSERT INTO Categories (CategoryID, Description) VALUES (3, 'Creditor');
INSERT INTO Categories (CategoryID, Description) VALUES (4, 'Newsletter');

INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (2, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (3, 1);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 2);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (2, 2);
INSERT INTO RelationCategories (RelationID, CategoryID) VALUES (1, 3);

COMMIT;

/* Normally these indexes are created by the primary/foreign keys,
   but we don't want to rely on them for this test */
CREATE UNIQUE ASC INDEX PK_Relations ON Relations (RelationID);
CREATE UNIQUE ASC INDEX PK_Categories ON Categories (CategoryID);
CREATE UNIQUE ASC INDEX PK_RelationCategories ON RelationCategories (RelationID, CategoryID);
CREATE ASC INDEX FK_RC_Relations ON RelationCategories (RelationID);
CREATE ASC INDEX FK_RC_Categories ON RelationCategories (CategoryID);

COMMIT;
""",
 'test_type': 'ISQL',
 'test_script': """SET PLAN ON;
/* FULL JOIN should return ... */
SELECT
  r.RelationName,
  rc.RelationID,
  rc.CategoryID,
  c.Description
FROM
  Relations r
  FULL JOIN RelationCategories rc ON (rc.RelationID = r.RelationID)
  FULL JOIN Categories c ON (c.CategoryID = rc.CategoryID)
WHERE
  c.CategoryID >= 2
ORDER BY
  rc.CategoryID DESC;
""",
 'expected_stdout': """PLAN SORT (JOIN (C INDEX (PK_CATEGORIES), JOIN (RC NATURAL, R NATURAL)))

RELATIONNAME                          RELATIONID   CATEGORYID DESCRIPTION
=================================== ============ ============ ====================

Diving Snorkel Shop                            1            3 Creditor
Diving Snorkel Shop                            1            2 Debtor
Bakery garbage                                 2            2 Debtor
<null>                                    <null>       <null> Newsletter
"""
}
]
}
